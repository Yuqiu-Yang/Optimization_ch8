i <- 2
y_vec <- c(y(xn[i-1,1]), y(xn[i-1,2]))
b <- (y_vec[1] - y_vec[2])/(xn[i-1,1]-xn[i-1,2])
a <- y_vec[1] - b * (xn[i-1,1])
x_new <- -a/b
y_new <- y(x_new)
if((y_vec[1]) * y_new < 0)
{
xn <- rbind(xn, c(xn[i-1,1], x_new))
fn <- rbind(fn, c(y_vec[1], y_new))
}else{
xn <- rbind(xn, c(x_new, xn[i-1,2]))
fn <- rbind(fn, c(y_new, y_vec[2]))
}
err <- abs(y_new)
i <- i + 1
i
err
y_vec <- c(y(xn[i-1,1]), y(xn[i-1,2]))
if(i > 2)
{
if(xn[i-1,1] == xn[i-2,1])
{
y_vec[1] <- y_vec[1]/2
}else if(xn[i-1,2] == xn[i-2,2]){
y_vec[2] <- y_vec[2]/2
}
}
b <- (y_vec[1] - y_vec[2])/(xn[i-1,1]-xn[i-1,2])
a <- y_vec[1] - b * (xn[i-1,1])
x_new <- -a/b
y_new <- y(x_new)
if((y_vec[1]) * y_new < 0)
{
xn <- rbind(xn, c(xn[i-1,1], x_new))
fn <- rbind(fn, c(y_vec[1], y_new))
}else{
xn <- rbind(xn, c(x_new, xn[i-1,2]))
fn <- rbind(fn, c(y_new, y_vec[2]))
}
err <- abs(y_new)
i <- i + 1
y_vec <- c(fn[i-1,1], fn[i-1,2])
if(i > 2)
{
if(xn[i-1,1] == xn[i-2,1])
{
y_vec[1] <- y_vec[1]/2
}else if(xn[i-1,2] == xn[i-2,2]){
y_vec[2] <- y_vec[2]/2
}
}
b <- (y_vec[1] - y_vec[2])/(xn[i-1,1]-xn[i-1,2])
a <- y_vec[1] - b * (xn[i-1,1])
x_new <- -a/b
y_new <- y(x_new)
if((y_vec[1]) * y_new < 0)
{
xn <- rbind(xn, c(xn[i-1,1], x_new))
fn <- rbind(fn, c(y_vec[1], y_new))
}else{
xn <- rbind(xn, c(x_new, xn[i-1,2]))
fn <- rbind(fn, c(y_new, y_vec[2]))
}
err <- abs(y_new)
i <- i + 1
y <- function(x){x^3 - 1}
x <- seq(0,2.01, 0.1)
plot(x,y(x), type = "l",
ylab = TeX("$x^3 - 1$"),
main = "")
illinois_ex <- function(FUN = y, x0, x1, e_tol = 1e-5)
{
xn <- matrix(c(x0, x1), nrow = 1)
fn <- matrix(c(y(x0), y(x1)), nrow = 1)
err <- Inf
i <- 2
while(err > e_tol)
{
y_vec <- c(fn[i-1,1], fn[i-1,2])
if(i > 2)
{
if(xn[i-1,1] == xn[i-2,1])
{
y_vec[1] <- y_vec[1]/2
}else if(xn[i-1,2] == xn[i-2,2]){
y_vec[2] <- y_vec[2]/2
}
}
b <- (y_vec[1] - y_vec[2])/(xn[i-1,1]-xn[i-1,2])
a <- y_vec[1] - b * (xn[i-1,1])
x_new <- -a/b
y_new <- y(x_new)
if((y_vec[1]) * y_new < 0)
{
xn <- rbind(xn, c(xn[i-1,1], x_new))
fn <- rbind(fn, c(y_vec[1], y_new))
}else{
xn <- rbind(xn, c(x_new, xn[i-1,2]))
fn <- rbind(fn, c(y_new, y_vec[2]))
}
err <- abs(y_new)
i <- i + 1
}
return(list(fn = fn,
xn = xn,
err = err))
}
temp <- illinois_ex(y, 2, 0)
temp
x <- seq(0,2.01, 0.1)
plot(x,y(x), type = "l",
ylab = TeX("$x^3 - 1$"),
main = "Iterations")
abline(h = 0, col = "cyan", lwd = 2)
for(i in 1 : nrow(temp$fn))
{
segments(temp$xn[i,1], temp$fn[i,1],
temp$xn[i,2], temp$fn[i,2],
col = rgb(153/255, 50/255, 204/255,
seq(0.2,1, length.out = nrow(temp$xn))))
}
for(i in 1 : nrow(temp$fn))
{
segments(temp$xn[i,1], temp$fn[i,1],
temp$xn[i,2], temp$fn[i,2],
col = rgb(153/255, 50/255, 204/255,
seq(0.5,1, length.out = nrow(temp$xn))))
}
for(i in 1 : nrow(temp$fn))
{
segments(temp$xn[i,1], temp$fn[i,1],
temp$xn[i,2], temp$fn[i,2],
col = rgb(153/255, 50/255, 204/255,
seq(0.7,1, length.out = nrow(temp$xn))))
}
x <- seq(0,2.01, 0.1)
plot(x,y(x), type = "l",
ylab = TeX("$x^3 - 1$"),
main = "Iterations")
abline(h = 0, col = "cyan", lwd = 2)
for(i in 1 : 10)
{
segments(temp$xn[i,1], temp$fn[i,1],
temp$xn[i,2], temp$fn[i,2],
col = rgb(153/255, 50/255, 204/255,
seq(0.1,1, length.out = 10)))
}
temp$fn
for(i in 1 : 4)
{
segments(temp$xn[i,1], temp$fn[i,1],
temp$xn[i,2], temp$fn[i,2],
col = rgb(153/255, 50/255, 204/255,
seq(0.1,1, length.out = 4)))
}
for(i in 1 : 4)
{
segments(temp$xn[i,1], temp$fn[i,1],
temp$xn[i,2], temp$fn[i,2],
col = rgb(153/255, 50/255, 204/255,
seq(0.5,1, length.out = 4)))
}
for(i in 1 : 10)
{
segments(temp$xn[i,1], temp$fn[i,1],
temp$xn[i,2], temp$fn[i,2],
col = rgb(153/255, 50/255, 204/255,
seq(0.5,1, length.out = 10)))
}
y <- function(x){0.25*x^4 - x}
x <- seq(0,2.01, 0.1)
plot(x, y(x), type = "l")
x0 <- 0
x1 <- 0.2
x2 <- 0.5
x_vec <- c(0, 0.2, 0.4)
y_vec <- y(x_vec)
lm(y_vec ~ x_vec + I(x_vec^2))
reg <- lm(y_vec ~ x_vec + I(x_vec^2))
lines(x,predict(reg, x))
lines(x,predict(reg, data.frame(x_vec = x)))
plot(predict(reg, data.frame(x_vec = x)))
x_vec <- c(0, 0.2, 1.4)
y_vec <- y(x_vec)
reg <- lm(y_vec ~ x_vec + I(x_vec^2))
lines(x,predict(reg, data.frame(x_vec = x)))
getAnywhere(optimise)
coef <- reg$coefficients
coef
quadratic_opt_ex <- function(FUN = y, x0,
x_tol = 1e-5,
f_tol = 1e-5,
max_n_iter = 1000)
{
xn <- x0
fn <- y(x0)
f_err <- Inf
x_err <- Inf
i <- 4
while((i < max_n_iter) &
(f_err > f_tol) &
(x_err > x_tol))
{
x_temp <- xn[(i - 3) : (i - 1)]
y_temp <- fn[(i - 3) : (i - 1)]
reg <- lm(y_temp ~ x_temp + I(x_temp^2))
coef <- reg$coefficients
x_new <- -coef[2]/(2 * coef[3])
y_new <- (4 * coef[3]*coef[1] - (coef[2])^2)/(4 * coef[3])
xn <- c(xn, x_new)
fn <- c(fn, y_new)
x_err <- abs(xn[i] - xn[i-1])
f_err <- abs(fn[i] - fn[i-1])
i <- i + 1
}
return(list(fn = fn,
xn = xn,
x_err = x_err,
f_err = f_err))
}
y <- function(x){0.25*x^4 - x}
x <- seq(0,2.01, 0.1)
plot(x, y(x), type = "l")
temp <- quadratic_opt_ex(y, c(0,0.5,1.4))
temp
coef <- unname(reg$coefficients)
coef
quadratic_opt_ex <- function(FUN = y, x0,
x_tol = 1e-5,
f_tol = 1e-5,
max_n_iter = 1000)
{
xn <- x0
fn <- y(x0)
f_err <- Inf
x_err <- Inf
i <- 4
while((i < max_n_iter) &
(f_err > f_tol) &
(x_err > x_tol))
{
x_temp <- xn[(i - 3) : (i - 1)]
y_temp <- fn[(i - 3) : (i - 1)]
reg <- lm(y_temp ~ x_temp + I(x_temp^2))
coef <- unname(reg$coefficients)
x_new <- -coef[2]/(2 * coef[3])
y_new <- (4 * coef[3]*coef[1] - (coef[2])^2)/(4 * coef[3])
xn <- c(xn, x_new)
fn <- c(fn, y_new)
x_err <- abs(xn[i] - xn[i-1])
f_err <- abs(fn[i] - fn[i-1])
i <- i + 1
}
return(list(fn = fn,
xn = xn,
x_err = x_err,
f_err = f_err))
}
temp <- quadratic_opt_ex(y, c(0,0.5,1.4))
temp
points(temp$xn, temp$fn)
quadratic_opt_ex <- function(FUN = y, x0,
x_tol = 1e-5,
f_tol = 1e-5,
max_n_iter = 1000)
{
xn <- x0
fn <- y(x0)
f_err <- Inf
x_err <- Inf
i <- 4
while((i < max_n_iter) &
(f_err > f_tol) &
(x_err > x_tol))
{
x_temp <- xn[(i - 3) : (i - 1)]
y_temp <- fn[(i - 3) : (i - 1)]
reg <- lm(y_temp ~ x_temp + I(x_temp^2))
coef <- unname(reg$coefficients)
x_new <- -coef[2]/(2 * coef[3])
y_new <- y(x_new)
xn <- c(xn, x_new)
fn <- c(fn, y_new)
x_err <- abs(xn[i] - xn[i-1])
f_err <- abs(fn[i] - fn[i-1])
i <- i + 1
}
return(list(fn = fn,
xn = xn,
x_err = x_err,
f_err = f_err))
}
temp <- quadratic_opt_ex(y, c(0,0.5,1.4))
points(temp$xn, temp$fn)
temp
y <- function(x){0.25*x^4 - x}
x <- seq(0,2.01, 0.1)
plot(x, y(x), type = "l")
temp <- quadratic_opt_ex(y, c())
temp <- quadratic_opt_ex(y, c(0,0.1,0.2))
temp
points(temp$xn, temp$fn,
pch = 19, col = rgb(153/255, 50/255, 204/255,
seq(0.1,1, length.out = length(temp$xn))))
library(latex2exp)
library(knitr)
library(kableExtra)
y <- function(x){0.25*x^4 - x}
x <- seq(0,2.01, 0.1)
plot(x, y(x), type = "l")
y <- function(x){0.25*x^4 - x}
dy <- function(x){x^3 - 1}
ddy <- function(x){3*x^2}
x <- seq(0,2.01, 0.1)
plot(x, y(x), type = "l")
lines(y(x0) + (x - x0) * dy(x0) + ((x - x0)^2) * ddy(x0))
x0 <- 0
lines(y(x0) + (x - x0) * dy(x0) + ((x - x0)^2) * ddy(x0))
x0 <- 0
lines(x, y(x0) + (x - x0) * dy(x0) + ((x - x0)^2) * ddy(x0))
x0 <- 0.1
lines(x, y(x0) + (x - x0) * dy(x0) + ((x - x0)^2) * ddy(x0))
x0 <- 1.5
lines(x, y(x0) + (x - x0) * dy(x0) + ((x - x0)^2) * ddy(x0))
x <- seq(0,2.01, 0.01)
plot(x, y(x), type = "l")
x0 <- 1.5
lines(x, y(x0) + (x - x0) * dy(x0) + ((x - x0)^2) * ddy(x0))
points(x0, y(x0))
x0 - dy(x0)/ddy(x0)
abline(v = 1.14)
lines(x, y(x0) + (x - x0) * dy(x0) + 0.5 * ((x - x0)^2) * ddy(x0))
plot(x, y(x), type = "l")
x0 <- 1.5
lines(x, y(x0) + (x - x0) * dy(x0) +
0.5 * ((x - x0)^2) * ddy(x0),
col = 'cyan')
points(x0, y(x0))
points(x0 - dy(x0)/ddy(x0), y(x0 - dy(x0)/ddy(x0)))
points(x0 - dy(x0)/ddy(x0),
y(x0 - dy(x0)/ddy(x0)),
pch = 19)
points(x0 - dy(x0)/ddy(x0),
y(x0 - dy(x0)/ddy(x0)),
pch = 19, col = 'cyan')
y <- function(x){0.25*x^4 - x}
dy <- function(x){x^3 - 1}
ddy <- function(x){3*x^2}
x <- seq(0,2.01, 0.01)
plot(x, y(x), type = "l",
main = "Newton's 1st Iteration")
x0 <- 1.5
lines(x, y(x0) + (x - x0) * dy(x0) +
0.5 * ((x - x0)^2) * ddy(x0),
col = 'cyan')
legend("topleft", legend = c("x^4/4 - x",
"Parabola"),
lty = 1, col = c(1, "cyan"))
legend("topleft", legend = c("x^4/4 - x",
"Parabola"),
lty = 1, col = c(1, "cyan"),
bty = "n")
y <- function(x){0.25*x^4 - x}
dy <- function(x){x^3 - 1}
ddy <- function(x){3*x^2}
x <- seq(0,2.01, 0.01)
plot(x, y(x), type = "l",
main = "Newton's 1st Iteration")
x0 <- 1.5
lines(x, y(x0) + (x - x0) * dy(x0) +
0.5 * ((x - x0)^2) * ddy(x0),
col = 'cyan')
points(x0, y(x0))
points(x0 - dy(x0)/ddy(x0),
y(x0 - dy(x0)/ddy(x0)),
pch = 19)
legend("topleft", legend = c("x^4/4 - x",
"Parabola"),
lty = 1, col = c(1, "cyan"),
bty = "n")
legend("top", legend = c("x^4/4 - x",
"Parabola"),
lty = 1, col = c(1, "cyan"),
bty = "n")
arrows(x0, y(x0), x0 - dy(x0)/ddy(x0),
y(x0 - dy(x0)/ddy(x0)))
arrows(x0, y(x0), x0 - dy(x0)/ddy(x0),
y(x0 - dy(x0)/ddy(x0)),
angle = 20)
x0 <- 1.5
x1 <- 1.4
x2 <- 1.6
x <- seq(0,2.01, 0.01)
plot(x, y(x), type = "l",
main = "Successive Parabola 1st Iteration")
x0 <- 1.5
x1 <- 1.4
x2 <- 1.6
points(x0, y(x0))
points(x1, y(x1))
points(x2, y(x2))
x0 <- c(1.5, 1.4, 1.6)
y0 <- y(x0)
points(x0, y0)
reg <- lm(y0 ~ x0 + I(x0^2))
lines(x, predict(reg, data.frame(x0 = x)))
lines(x, predict(reg, data.frame(x0 = x)),
col = "cyan")
reg$coefficients
temp <- reg$coefficients
temp <- unname(reg$coefficients)
points(-temp[2]/(2 * temp[3]), y(-temp[2]/(2 * temp[3])))
points(-temp[2]/(2 * temp[3]), y(-temp[2]/(2 * temp[3])),
pch = 19)
x0 <- c(1.5, 1.75, 2)
y0 <- y(x0)
points(x0, y0)
reg <- lm(y0 ~ x0 + I(x0^2))
lines(x, predict(reg, data.frame(x0 = x)),
col = "cyan")
temp <- unname(reg$coefficients)
points(-temp[2]/(2 * temp[3]), y(-temp[2]/(2 * temp[3])),
pch = 19)
y <- function(x){0.25*x^4 - x}
x <- seq(0,2.01, 0.01)
plot(x, y(x), type = "l",
main = "Successive Parabola 1st Iteration")
x0 <- c(1.5, 1.75, 2)
y0 <- y(x0)
points(x0, y0)
reg <- lm(y0 ~ x0 + I(x0^2))
lines(x, predict(reg, data.frame(x0 = x)),
col = "cyan")
temp <- unname(reg$coefficients)
points(-temp[2]/(2 * temp[3]), y(-temp[2]/(2 * temp[3])),
pch = 19)
legend("top", legend = c("x^4/4 - x",
"Parabola"),
lty = 1, col = c(1, "cyan"),
bty = "n")
quadratic_opt_ex <- function(FUN = y, x0,
x_tol = 1e-5,
f_tol = 1e-5,
max_n_iter = 1000)
{
xn <- x0
fn <- y(x0)
f_err <- Inf
x_err <- Inf
i <- 4
while((i < max_n_iter) &
(f_err > f_tol) &
(x_err > x_tol))
{
x_temp <- xn[(i - 3) : (i - 1)]
y_temp <- fn[(i - 3) : (i - 1)]
reg <- lm(y_temp ~ x_temp + I(x_temp^2))
coef <- unname(reg$coefficients)
x_new <- -coef[2]/(2 * coef[3])
y_new <- y(x_new)
xn <- c(xn, x_new)
fn <- c(fn, y_new)
x_err <- abs(xn[i] - xn[i-1])
f_err <- abs(fn[i] - fn[i-1])
i <- i + 1
}
return(list(fn = fn,
xn = xn,
x_err = x_err,
f_err = f_err))
}
y <- function(x){0.25*x^4 - x}
x <- seq(0,2.01, 0.1)
plot(x, y(x), type = "l")
temp <- quadratic_opt_ex(y, c(2, 1.75, 1.5))
points(temp$xn, temp$fn,
pch = 19, col = rgb(153/255, 50/255, 204/255,
seq(0.1,1, length.out = length(temp$xn))))
3^{1/3}
temp <- data.frame(matrix(NA,
nrow = 3,
ncol = 2))
colnames(temp) <- c("Root Finding", "Optimization")
rownames(temp) <- c("Linear", "Superlinear",
"Quadratic")
temp[1,] <- c("Bisection, Regula Falsi", "Golden Section")
temp[2,] <- c("Secant, Illinois", "Parabolic Interpolation")
temp[3,] <- rep("Newton",2)
temp
y <- function(x){0.25*x^4 - x}
x <- seq(0,2.01, 0.01)
plot(x, y(x), type = "l",
main = "Successive Parabolic 1st Iteration")
x0 <- c(2, 1.75, 1.5)
y0 <- y(x0)
points(x0, y0)
reg <- lm(y0 ~ x0 + I(x0^2))
lines(x, predict(reg, data.frame(x0 = x)),
col = "cyan")
temp <- unname(reg$coefficients)
points(-temp[2]/(2 * temp[3]), y(-temp[2]/(2 * temp[3])),
pch = 19)
legend("top", legend = c("x^4/4 - x",
"Parabola"),
lty = 1, col = c(1, "cyan"),
bty = "n")
-temp[2]/(2 * temp[3])
dy <- function(x){x^3 - 1}
ddy <- function(x){3*x^2}
x0 <- 1.5
x0 - dy(x0)/ddy(x0)
